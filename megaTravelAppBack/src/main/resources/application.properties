# Define a custom port instead of the default 8080
server.port=8443
security.require-ssl=true

# The format used for the keystore 
server.ssl.key-store-type=JKS
# The path to the keystore containing the certificate
#server.ssl.key-store=megaTravelAppBack/src/main/resources/keystore.jks
server.ssl.key-store=files/keystore.jks
server.ssl.key-store-password=someString
# The alias mapped to the certificate
server.ssl.key-alias=someString

#spring.datasource.url=jdbc:mysql://localhost:3306/jdbc?useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true
spring.datasource.url=jdbc:mysql://localhost:3306/MegaTravelAppBack?useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true

spring.datasource.username=root
spring.datasource.password=root

#korisno ako je konekcija dugo u idle stanju
spring.datasource.dbcp.test-while-idle = true
spring.datasource.dbcp.validation-query = SELECT 1

#server.port = 8443

#JPA-Hibernate
spring.jpa.show-sql = true
#kreira tabele na osnovu anotacija @Entity i kada aplikacija zavrsi sa radom dropuje ih
spring.jpa.hibernate.ddl-auto = create-drop
spring.datasource.initialization-mode=always
#optimizacija za mysql upite
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

spring.servlet.multipart.enabled=true
spring.servlet.multipart.location=${user.dir}

# deo za HTTPS komunikaciju

# Define a custom port instead of the default 8080

#server.port = 8843

# Tell Spring Security (if used) to require requests over HTTPS
#security.require-ssl=true

# The format used for the keystore 
#server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore.p12
# The password used to generate the certificate
#server.ssl.key-store-password=password
# The alias mapped to the certificate
#server.ssl.key-alias=tomcat

